name: .NET Core CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite disparar manualmente o pipeline para deploy em produção

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore "CollectionSchedulingAPI/CollectionSchedulingAPI.csproj"

    - name: Build project
      run: dotnet build "CollectionSchedulingAPI/CollectionSchedulingAPI.csproj" --configuration Release --no-restore

    - name: Run tests
      run: dotnet test "CollectionSchedulingTESTS/CollectionSchedulingTESTS.csproj" --no-build --verbosity normal

  docker_build:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/collection-scheduling-api:latest .
    
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/collection-scheduling-api:latest

  deploy_staging:
    runs-on: ubuntu-latest
    needs: docker_build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Compose
      run: |
        docker compose -f docker-compose.staging.yml up -d --build

  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Compose for Production
      run: |
        docker compose -f docker-compose.prod.yml up -d --build
