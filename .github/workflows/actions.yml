name: .NET Core CI/CD

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore "CollectionSchedulingAPI/CollectionSchedulingAPI.csproj"
    
    - name: Restore test dependencies
      run: dotnet restore "CollectionSchedulingTESTS/CollectionSchedulingTESTS.csproj"

    - name: Build project
      run: dotnet build "CollectionSchedulingAPI/CollectionSchedulingAPI.csproj" --configuration Release --no-restore
    
    - name: Build test project
      run: dotnet build "CollectionSchedulingTESTS/CollectionSchedulingTESTS.csproj" --configuration Release --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Run tests
      run: dotnet test "CollectionSchedulingTESTS/CollectionSchedulingTESTS.csproj" --no-build --verbosity normal

  docker_build:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t collection-scheduling-api:latest .

    - name: Push Docker image
      run: |
        docker tag collection-scheduling-api:latest ${{ secrets.DOCKER_USERNAME }}/collection-scheduling-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/collection-scheduling-api:latest

  deploy_staging:
    runs-on: ubuntu-latest
    needs: docker_build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Staging
      run: |
        docker-compose -f docker-compose.yml up -d --build

  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Production
      run: |
        docker-compose -f docker-compose.prod.yml up -d --build
